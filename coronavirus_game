{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'pygame' has no attribute 'K_SPACEBAR'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-55-39b18c44a492>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    154\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mplayer_size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m             \u001b[0mplayer_pos\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mpygame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mK_SPACEBAR\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m                 \u001b[0mpause\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m                 \u001b[0mpause\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'pygame' has no attribute 'K_SPACEBAR'"
     ]
    }
   ],
   "source": [
    "import pygame\n",
    "import random\n",
    "import os,sys\n",
    "\n",
    "\n",
    "pygame.init()\n",
    "clock = pygame.time.Clock()\n",
    "myFont = pygame.font.SysFont(\"monospace\",35)\n",
    "\n",
    "#board\n",
    "WIDTH= 800\n",
    "HEIGHT= 600\n",
    "BACKGROUND = (0,0,0)\n",
    "screen = pygame.display.set_mode((WIDTH,HEIGHT),0,32)\n",
    "pygame.display.set_caption('CORONAVIRUS OUTBREAK 2020!')\n",
    "cool_background = pygame.image.load('cool_background.jpg')\n",
    "\n",
    "#colors\n",
    "RED = (255,0,0)\n",
    "GREEN = (0,255,0)\n",
    "YELLOW = (255,255,0)\n",
    "\n",
    "#Players & Variuables\n",
    "\n",
    "speed = 10\n",
    "game_over = False\n",
    "score = 0\n",
    "\n",
    "virus_image = pygame.image.load('coronavirus_image_2.png')\n",
    "player_size = 25\n",
    "player_pos = [WIDTH/2,HEIGHT-2*20]\n",
    "\n",
    "\n",
    "bonus_size = 50\n",
    "bonus_pos = [random.randint(0,WIDTH-bonus_size),0]\n",
    "bonus_list = [bonus_pos]\n",
    "\n",
    "\n",
    "def player_1 (player_1):\n",
    "    player_1 = pygame.draw.rect(screen,GREEN, (player_pos[0],player_pos[1], player_size, player_size)) \n",
    "    \n",
    "#def player_1 (x,y):\n",
    "   # screen.blit(virus_image,(WIDTH/2,HEIGHT/2))\n",
    "\n",
    "def set_level(score,speed):\n",
    "    if score < 20:\n",
    "        speed = 6\n",
    "    elif score <40:\n",
    "        speed < 8\n",
    "    elif score < 60:\n",
    "        speed = 10\n",
    "    elif score < 75:\n",
    "        speed = 14\n",
    "    else:\n",
    "      speed = score/5+1  \n",
    "    return speed\n",
    "\n",
    "def paused():\n",
    "\n",
    "    largeText = pygame.font.SysFont(\"comicsansms\",115)\n",
    "    TextSurf, TextRect = text_objects(\"Paused\", largeText)\n",
    "    TextRect.center = ((display_width/2),(display_height/2))\n",
    "    gameDisplay.blit(TextSurf, TextRect)\n",
    "    \n",
    "\n",
    "    while pause:\n",
    "        for event in pygame.event.get():\n",
    "\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                quit()\n",
    "                \n",
    "        #gameDisplay.fill(white)\n",
    "        \n",
    "\n",
    "        button(\"Continue\",150,450,100,50,green,bright_green,unpause)\n",
    "        button(\"Quit\",550,450,100,50,red,bright_red,quitgame)\n",
    "\n",
    "        pygame.display.update()\n",
    "        clock.tick(15)  \n",
    "\n",
    "def drop_bonus(bonus_list):\n",
    "    delay = random.random()\n",
    "    if len(bonus_list) <8 and delay < 0.2:\n",
    "        x_pos = random.randint(0,WIDTH-bonus_size)\n",
    "        y_pos = 0\n",
    "        bonus_list.append([x_pos, y_pos])\n",
    "        \n",
    "def draw_bonus(bonus_list):\n",
    "    for bonus_pos in bonus_list:\n",
    "       # pygame.draw.rect(screen,GREEN, (bonus_pos[0],bonus_pos[1], bonus_size, bonus_size))  \n",
    "        screen.blit(virus_image,(bonus_pos[0],bonus_pos[1]))\n",
    "def update_bonus_positions(bonus_list, score):\n",
    "    for idx,bonus_pos in enumerate(bonus_list):\n",
    "        if  bonus_pos[1] >=0 and bonus_pos[1]< HEIGHT: \n",
    "        #bonus_collision = True\n",
    "            bonus_pos[1]+= speed         \n",
    "        else:\n",
    "            bonus_list.pop(idx)\n",
    "            score += 10\n",
    "    return score           \n",
    "    draw_bonus(bonus_list)\n",
    "    \n",
    "    pygame.draw.rect(screen,RED, (player_pos[0],player_pos[1], player_size, player_size))  \n",
    "    \n",
    "    clock.tick(30)\n",
    "     \n",
    "    pygame.display.update()\n",
    "    \n",
    "def bonus_check(bonus_list,player_pos): # bonus points\n",
    "    for bonus_pos in bonus_list:\n",
    "        if bonus_collision(bonus_pos,player_pos):\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "def bonus_collision(bonus_pos, player_pos):\n",
    "        p_x = player_pos[0]\n",
    "        p_y = player_pos[1]\n",
    "        \n",
    "        b_x = bonus_pos[0]\n",
    "        b_y = bonus_pos[1]\n",
    "        \n",
    "        #x overlap - bonus & Player\n",
    "        if (b_x >= p_x and b_x < (p_x + player_size)) or (p_x >= b_x and p_x< (b_x + bonus_size)):\n",
    "       \n",
    "        #y overlap - bonus & Player\n",
    "            if (b_y >= p_y and b_y <(p_y + player_size)) or (p_y >= b_y and p_y< (b_y + bonus_size)):      \n",
    "                return True \n",
    "        return False\n",
    "    \n",
    "while not game_over:\n",
    "    \n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT : \n",
    "  \n",
    "            # deactivates the pygame library \n",
    "            pygame.quit() \n",
    "  \n",
    "            # quit the program. \n",
    "            quit()  \n",
    "        \n",
    "        if event.type == pygame.KEYDOWN:\n",
    "            x = player_pos [0]\n",
    "            y = player_pos [1]\n",
    "            if event.type == pygame.K_LEFT:\n",
    "                x -= player_size\n",
    "            elif event.key == pygame.K_RIGHT:\n",
    "                x += player_size\n",
    "            elif event.key == pygame.K_LEFT:\n",
    "                x -= player_size\n",
    "            elif event.key == pygame.K_UP:\n",
    "                y -= player_size \n",
    "            elif event.key == pygame.K_DOWN:\n",
    "                y += player_size   \n",
    "            player_pos = [x,y]\n",
    "            if event.key == pygame.K_SPACEBAR:\n",
    "                pause = True \n",
    "                pause = False\n",
    "                paused()\n",
    "    \n",
    "   \n",
    "    screen.blit(cool_background,(0,0))\n",
    "    \n",
    "    if bonus_collision(player_pos,bonus_pos):\n",
    "         bonus_check = True\n",
    "         break\n",
    "    \n",
    "    drop_bonus(bonus_list)\n",
    "    score = update_bonus_positions(bonus_list,score)\n",
    "    speed = set_level(score, speed)\n",
    "        \n",
    "    player_1(player_1)\n",
    "    draw_bonus(bonus_list)\n",
    "    \n",
    "    text = \"Score:\" + str(score)\n",
    "    label = myFont.render(text,1,YELLOW)\n",
    "    screen.blit(label,(WIDTH-200, 10))\n",
    "    print(score)\n",
    "    \n",
    "    if bonus_check(bonus_list,player_pos):\n",
    "        bonus_check = True\n",
    "        update_bonus_positions(bonus_list,score)\n",
    "    \n",
    "    clock.tick(30)\n",
    "     \n",
    "    pygame.display.update()\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
